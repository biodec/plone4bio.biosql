
from datetime import datetime
from Acquisition import aq_inner, aq_parent, Explicit

from Products.CMFCore.utils import getToolByName
from Products.CMFPlone import Batch
from Products.Five import BrowserView
from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile

from zope.component import createObject
from zope.formlib import form
from zope.interface import implements
from zope.viewlet.interfaces import IViewlet

from plone.app.form import base

from plone4bio.base import Plone4BioMessageFactory as _
from plone4bio.base.browser.seqrecord import SeqRecordAddForm
from plone4bio.base.content.seqrecord import SeqRecord
from plone4bio.biosql.browser.interfaces import IBioSQLRootLoad
from plone4bio.biosql.interfaces import IBioSQLRoot, IBioSQLDatabase, IBioSQLSeqRecord

from BioSQL import Loader

#class BioSQLRootView(BrowserView):
#    """ """
#    pass

# TODO XXX
def guess_dbtype(filename):
    return "GenBank"

class BioSQLRootAddForm(base.AddForm):
    """Add form """
    form_fields = form.Fields(IBioSQLRoot)
    label = _(u"Add BioSQLRoot")
    form_name = _(u"Edit BioSQLRoot")
    def create(self, data):
        object = createObject(u"plone4bio.biosql.BioSQLRoot")
        form.applyChanges(object, self.form_fields, data)
        return object

class BioSQLRootEditForm(base.EditForm):
    """Edit form """
    form_fields = form.Fields(IBioSQLRoot)
    label = _(u"Edit BioSQLRoot")
    form_name = _(u"Edit BioSQLRoot")

class BioSQLDatabaseAddForm(base.AddForm):
    """Add form """
    form_fields = form.Fields(IBioSQLDatabase)
    label = _(u"Add BioSQLDatabase")
    form_name = _(u"Edit BioSQLDatabase")
    def create(self, data):
        import pdb;pdb.set_trace()
        root = self.context.getBioSQLRoot()
        dbserver = root.getDBServer()
        biodb = dbserver.new_database(data['id'], description=data.get("description", None))
        dbserver.commit()
        object = root[data['id']]
        # TODO: test catalog object
        return object

class BioSQLDatabaseEditForm(base.EditForm):
    """Edit form """
    form_fields = form.Fields(IBioSQLDatabase)
    label = _(u"Edit BioSQLDatabase")
    form_name = _(u"Edit BioSQLDatabase")

class BioSQLDatabaseLoadForm(object): #base.EditForm):
    """Edit form """
    # form_fields = form.Fields(IBioSQLRootLoad)
    # label = _(u"Load data into BioSQLRoot")
    # form_name = _(u"Load data into BioSQLRoot")
    
    def __init__(self, context, request):
        self.context = context
        self.request = request

    def errors(self):
        form = self.request.form
        if "UPLOAD_SUBMIT" in form:
            filename = getattr(form["field.data"], "filename", None)
            dbtype = form.get("field.dbtype")
            if filename:
                if not dbtype:
                    dbtype = guess_dbtype(filename)[0]
            return self.upload_data(form["field.data"], dbtype)
        return ''

    def upload_data(self, data, dbtype):        
        # formatter =     self.request.locale.dates.getFormatter(
        #    'dateTime', 'medium')
        error = self.context.loadData(data, dbtype)
        if error:
            return error
        else:
            return _("Updated ${data} of ${dbtype} on ${date_time}",
                 mapping={'date_time': repr(datetime.utcnow()),
                          'data': repr(data),
                          'dbtype': dbtype})

class BioSQLSeqRecordEditForm(base.EditForm):
    """Edit form """
    form_fields = form.Fields(IBioSQLSeqRecord)
    label = _(u"Edit BioSQLSeqRecord")
    form_name = _(u"Edit BioSQLSeqRecord")

class BioSQLSeqRecordAddForm(SeqRecordAddForm):
    """Add form """
    label = _(u"Add BioSQLSeqRecord")
    form_name = _(u"Edit BioSQLSeqRecord")
    def create(self, data):
        seqrecord = SeqRecord(title=data['title'])
        form.applyChanges(seqrecord, self.form_fields, data)
        seqrecord.id = seqrecord.title
        db = self.context.context
        biodb = db.getDatabase()
        if biodb.load([seqrecord.seqrecord,]) == 1:
            bioentry_id = biodb.adaptor.last_id('bioentry')
            object = db[str(bioentry_id)]
            # TODO: FIXME
            object.Description()
        else:
            object = None
        return object

